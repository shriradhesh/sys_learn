const express = require('express');
const router = express.Router();
const appliedjobModel = require('../models/appliedjobModel');

// POST endpoint to apply for a job
router.post('/apply/:jobId', async (req, res) => {
  try {
    const { userName, job_Heading, Salary, uploadResume, job_expired_Date } = req.body;
    const jobId = req.params.jobId;

    // Check if the job exists
    const jobExists = await jobModel.findById(jobId);
    if (!jobExists) {
      return res.status(404).json({ error: 'Job not found' });
    }

    // Check if the user has already applied to the job
    const existingApplication = await appliedjobModel.findOne({ userName, jobId });
    if (existingApplication) {
      return res.status(400).json({ error: 'You have already applied to this job' });
    }

    // Create a new application
    const newApplication = new appliedjobModel({
      userName,
      job_Heading,
      jobId,
      Salary,
      uploadResume,
      job_expired_Date,
    });

    // Save the application to the database
    await newApplication.save();

    res.status(201).json({ message: 'Application submitted successfully' });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'Internal Server Error' });
  }
});

module.exports = router;



*****************************************************************


 // Check if this booking ID has already been paid
                                                    const bookingId = shortid.generate();
                                                
                                                    const existingTransaction = await TransactionModel.findOne({ bookingId: bookingId });
                                                    if (existingTransaction) {
                                                      return res.status(400).json({
                                                        success: false,
                                                        message: 'Booking has already been paid',
                                                      });
                                                    }
                                                      
                                                       
                                                    // Store the payment transaction
                                                    const transaction = new TransactionModel({
                                                      bookingId: bookingId,
                                                      chargeId : paymentResponse.financialTransactionId,
                                                      amount: totalFare_in_Euro,
                                                      currency: 'usd',
                                                      payment_status : paymentStatus,
                                                      
                                                    });
                                                
                                                    await transaction.save();
                                                    const newNotification = new NotificationDetail({
                                                      userId  ,
                                                      message: `congratulation ..!! , new booking has been made with bookingId : ${bookingId} `,
                                                      date: date,
                                                      status: 'confirmed', 
                                                      bookingId: bookingId,
                                                      tripId,
                                                      notification_status : 0
              
                                                    });
                                                    await newNotification.save()
                                                    await transaction.save();
                                                    const newAdminNotification = new AdminNotificationDetail({
                                                      userId  ,                                           
                                                      message: `congratulation ..!! , new booking has been made by the user : ${userFullName} in a trip : ${tripNumber} with bookingId : ${bookingId} `,
                                                      date: date,
                                                      status: 'confirmed', 
                                                      bookingId: bookingId,
                                                      tripId
              
                                                    });
                                                    await newAdminNotification.save()
                                                
                                                    // Save the updated trip
                                                    await trip.save();
                                                
                                                    // Create a new booking
                                                    const booking = new BookingModel({
                                                      tripId,
                                                      tripNumber,
                                                      date,  
                                                      status,
                                                      bookingId,
                                                      userId,
                                                      selectedSeatNumbers,
                                                      passengers: passengers.map((passenger, index) => ({
                                                        ...passenger,
                                                        seatNumber: selectedSeatNumbers[index],
                                                        ageGroup: calculateAgeGroup(passenger.age),
                                                      })),
                                                      totalFare: totalFare_in_Euro,
                                                      source,
                                                      destination,
                                                      userEmail : email
              
                                                    });
                                                
                                                    await booking.save();
                                                
                                                    // Generate passenger details and email content
                                                    const passengerDetails = passengers
                                                      .map((passenger, index) => {
                                                        const seatNumber = selectedSeatNumbers[index];
                                                        return `
                                                        <tr>
                                                        <td style="border: 2px solid #dadada; border-right: 0; border-left: 0; padding: 10px; font-size: 18px; white-space: nowrap;">
                                                          ${passenger.name}
                                                        </td>
                                                        <td style="border: 2px solid #dadada; padding: 10px; font-size: 18px; border-right: 0; white-space: nowrap;">
                                                          ${passenger.age}
                                                        </td>
                                                        <td style="border: 2px solid #dadada; padding: 10px; font-size: 18px; border-right: 0; white-space: nowrap;">
                                                          ${passenger.gender}
                                                        </td>
                                                        <td style="border: 2px solid #dadada; padding: 10px; font-size: 18px; border-right: 0; white-space: nowrap;">
                                                          ${seatNumber}
                                                        </td>                                              
                                                      </tr>
                                                    `;
                                                  })
                                                  .join('\n');
                                                
                                                    const emailContent = `
                                                    <main>
                                                    <div style="width: 80%; margin: 40px auto; padding: 20px; background-color: #fff; border: 2px solid #000; border-radius: 8px; box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);">
                                                    <div>
                                                    <img src="https://itdevelopmentservices.com/insphire/public/image/front/img/logo.png" alt="InspHired" style="width: 25%;">
                                                    <h2 style="font-size: 28px; font-weight: 700; color: #000; margin: 0%; text-align: right;">Bus Ticket</h2>
                                                  </div>
                                                      <hr style="border-top: 2px solid #000;">
                                                      <div style="margin-top: 20px;">
                                                        <p style="font-size: 18px; margin-bottom: 10px;"><strong>Dear ${user.fullName},</strong></p>
                                                        <p style="font-size: 16px; margin-bottom: 20px;">Your booking for departure on ${date} has been confirmed.</p>
                                                        <table style="width: 100%; border-collapse: collapse;">
                                                          <tr>
                                                            <th style="padding: 10px; text-align: left; font-size: 18px; border-bottom: 2px solid #000;">Booking ID</th>
                                                            <td style="padding: 10px; font-size: 18px; border-bottom: 2px solid #000;">${bookingId}</td>
                                                          </tr>
                                                          <tr>
                                                            <th style="padding: 10px; text-align: left; font-size: 18px; border-bottom: 2px solid #000;">Trip Number</th>
                                                            <td style="padding: 10px; font-size: 18px; border-bottom: 2px solid #000;">${trip.tripNumber}</td>
                                                          </tr>
                                                          <tr>
                                                            <th style="padding: 10px; text-align: left; font-size: 18px; border-bottom: 2px solid #000;">Bus Number</th>
                                                            <td style="padding: 10px; font-size: 18px; border-bottom: 2px solid #000;">${trip.bus_no}</td>
                                                          </tr>
                                                          <tr>
                                                            <th style="padding: 10px; text-align: left; font-size: 18px; border-bottom: 2px solid #000;">Driver Name</th>
                                                            <td style="padding: 10px; font-size: 18px; border-bottom: 2px solid #000;">${Driver.driverName}</td>
                                                          </tr>
                                                          <tr>
                                                            <th style="padding: 10px; text-align: left; font-size: 18px; border-bottom: 2px solid #000;">Driver Contact</th>
                                                            <td style="padding: 10px; font-size: 18px; border-bottom: 2px solid #000;">${Driver.driverContact}</td>
                                                          </tr>
                                                          <tr>
                                                            <th style="padding: 10px; text-align: left; font-size: 18px; border-bottom: 2px solid #000;">Trip Starting Time</th>
                                                            <td style="padding: 10px; font-size: 18px; border-bottom: 2px solid #000;">${trip.startingTime}</td>
                                                          </tr>
                                                          <tr>
                                                            <th style="padding: 10px; text-align: left; font-size: 18px; border-bottom: 2px solid #000;">Your Source</th>
                                                            <td style="padding: 10px; font-size: 18px; border-bottom: 2px solid #000;">${source}</td>
                                                          </tr>
                                                          <tr>
                                                            <th style="padding: 10px; text-align: left; font-size: 18px;"><strong>Your Destination</strong></th>
                                                            <td style="padding: 10px; font-size: 18px;">${destination}</td>
                                                          </tr>
                                                        </table>
                                                        <!-- Passenger Details Section -->
                                                        <div style="margin-top: 20px;">
                                                          <h3 style="font-size: 24px; font-weight: 700; color: #000; margin-bottom: 10px;">Passenger Details</h3>
                                                          <table style="width: 100%; border-collapse: collapse; text-align: center;">
                                                            <tr>
                                                              <th style="padding: 10px; font-size: 18px; border-bottom: 2px solid #000;">Passenger Name</th>
                                                              <th style="padding: 10px; font-size: 18px; border-bottom: 2px solid #000;">Age</th>
                                                              <th style="padding: 10px; font-size: 18px; border-bottom: 2px solid #000;">Gender</th>
                                                              <th style="padding: 10px; font-size: 18px; border-bottom: 2px solid #000;">Seat Number</th>
                                                            </tr>
                                                            ${passengerDetails}
                                                          </table>
                                                        </div>
                                                      </div>
                                                      <!-- Footer -->
                                                      
                                                    </div>
                                                  </main>
                                                  
                                                      `;
                                                    
                                                    // Generate the QR CODE and send the booking confirmation email
                                                    const qrCodeData = `http://192.168.1.41:4000/${bookingId}`;
                                                    const qrCodeImage = 'ticket-QRCODE.png';
                                                    await qrcode.toFile(qrCodeImage, qrCodeData);
                                                
                                                    await sendBookingEmail(email, 'Your Booking has been confirmed', emailContent);
                                                   
                                                    res.status(200).json({
                                                      success: true,
                                                      message: 'Booking',
                                                      status : paymentStatus
                                                    });
                                               }
                                                                                         
                                        }
                                             catch(error)
                                                {
                                                  console.error(error);
                                                  throw error; 
                                                }
                                  

****************************
**********************



{ else if (payment_key == 2) {
  // MTN MoMo payment handling logic
  try {
    const apiKeyResponse = await getApiKey(xReferenceId, subscriptionKey);
    const momoUsername = xReferenceId;
    const momoPassword = apiKeyResponse;

    const tokenUrl = 'https://sandbox.momodeveloper.mtn.com/collection/token/';
    const bearerToken = await createAccessToken(tokenUrl, subscriptionKey, xReferenceId, momoUsername, momoPassword);

    // Make payment request
    const paymentRequestResponse = await axios.post(
      'https://sandbox.momodeveloper.mtn.com/collection/v1_0/requesttopay',
      {
        amount: totalFareInCents,
        currency: 'USD',
        externalId: bookingId,
        payer: {
          partyIdType: 'MSISDN',
          partyId: 'REPLACE_WITH_CUSTOMER_PHONE_NUMBER',
        },
        payerMessage: 'Paying For Bus Ticket',
        payeeNote: 'Payment Successful',
      },
      {
        headers: {
          'X-Reference-Id': xReferenceId,
          'X-Target-Environment': 'sandbox',
          'Content-Type': 'application/json',
          'Ocp-Apim-Subscription-Key': subscriptionKey,
          'Authorization': `Bearer ${bearerToken}`,
        },
      }
    );

    console.log('Payment Request Response:', {
      message: 'Payment Successful',
      paymentResponse: paymentRequestResponse?.data, // Exclude circular references
    });

    // Get payment status
    const paymentStatusResponse = await axios.get(
      `https://sandbox.momodeveloper.mtn.com/collection/v1_0/requesttopay/${xReferenceId}`,
      {
        headers: {
          'X-Target-Environment': 'sandbox',
          'Ocp-Apim-Subscription-Key': subscriptionKey,
          'Authorization': `Bearer ${bearerToken}`,
        },
      }
    );

    console.log('Payment Status Response:', {
      message: 'Payment Status Successful',
      paymentStatus: paymentStatusResponse.data,
    });

    // Continue with the rest of your booking logic...

    res.status(200).json({
      success: true,
      message: 'Booking',
      status: 'MTN MoMo payment successful',
    });
  } catch (error) {
    console.error('Error making MTN MoMo payment:', error.response ? error.response.data : error.message);
    res.status(500).json({
      success: false,
      message: 'MTN MoMo Payment Error',
    });
  }
} else {
  res.status(400).json({
    success: false,
    message: 'Invalid payment key',
  });
}


























{
    "success": true,
    "message": "Payment and Payment Status Successful",
    "paymentResponse": "",
    "paymentStatus": {
        "financialTransactionId": "584952309",
        "externalId": "123",
        "amount": "100",
        "currency": "EUR",
        "payer": {
            "partyIdType": "MSISDN",
            "partyId": "8839549283"
        },
        "payerMessage": "Paying For Bus Ticket",
        "payeeNote": "Payment Successful",
        "status": "SUCCESSFUL"
    }
}



update 3 api in sys learn
create 1 api in sys learn
update in trip section in camerBus
implement mtn momo for booking in CamerBus 

